require "spec_helper"

RSpec.describe Alfred::Actions::AddTodo do
  context "#process" do
    module Settings
      def todo_string
        method_missing(:todo_string)
      end

      def quick_add_mode
        method_missing(:quick_add_mode)
      end
    end

    before do
      Alfred::Settings.extend(Settings)

      allow(Alfred::Settings).to receive(:todo_string).and_return(todo_string)

      allow(Alfred::Settings).to receive(:quick_add_mode).and_return(quick_add_mode)
    end

    let(:input) { "do something" }
    let(:todo_string) { "- [ ]" }
    let(:quick_add_mode) { "prepend" }
    let(:callback) { double(NotePlan::XCallbackUrl::AddText, url: callback_url) }
    let(:callback_url) { double("callback_url") }

    subject(:action) { Alfred::Actions::AddTodo.new(input) }

    it 'is an x-callback-url generated by NotePlan::XCallbackUrl::AddText' do
      allow(NotePlan::XCallbackUrl::AddText).to receive(:new).and_return(callback)

      expect(action.process).to eq(callback_url)
    end

    context "todo text" do
      let(:todo_text) { "#{todo_string} #{input}" }

      it 'is prefixed with the todo string from Alfred::Settings' do
        expect(NotePlan::XCallbackUrl::AddText).to receive(:new).with(todo_text, anything).and_return(callback)
        
        action.process
      end
    end

    context "date" do
      let(:today) { double("today") }

      before do
        allow(Date).to receive(:today).and_return(today)
      end

      it 'is today' do
        expect(NotePlan::XCallbackUrl::AddText).to receive(:new)
          .with(
            anything,
            hash_including(date: today)
          )
          .and_return(callback)
        
        action.process
      end
    end

    context "mode" do
      it 'is the quick add mode from Alfred::Settings' do
        expect(NotePlan::XCallbackUrl::AddText).to receive(:new)
          .with(
            anything,
            hash_including(mode: quick_add_mode)
          )
          .and_return(callback)
        
        action.process
      end
    end
  end
end
